package logger

import (
	"time"
)

// StructuredLog is the structured log as documented in the specification.
// Current specification follows:
// https://jurnal.atlassian.net/wiki/pages/viewpage.action?pageId=48735256814&pageVersion=20
// Any changes in the specification MAY require changes in the SDK implementation,
// so we need to refer the page version.
type StructuredLog struct {
	// Level indicate the severity of the log. This can be UPPERCASE or lowercase.
	// +Required
	Level string `json:"level"`

	// Timestamp is when the log is generated (or called) by the user.
	// This Timestamp cannot be tested because it generated by internal log package.
	// +Required
	Timestamp time.Time `json:"timestamp"`

	// Caller is the line where the log is called.
	// +Optional
	Caller string `json:"caller,omitempty"`

	// Message is log message.
	// +Required
	Message string `json:"message"`

	// TraceID and SpanID is ID from OpenTelemetry, so we can share the same ID
	// between logs and traces data.
	// Default value is: 00000000000000000000000000000000
	// +Required
	TraceID string `json:"trace_id"`

	// SpanID is generated OpenTelemetry SpanID.
	// Default value is:m 0000000000000000
	// +Required
	SpanID string `json:"span_id"`

	// TraceFlags An 8-bit field that controls tracing flags such as sampling, trace level, etc.
	// https://www.w3.org/TR/trace-context/#trace-flags
	// +Optional
	TraceFlags string `json:"trace_flags,omitempty"`

	// Resource is the source of the log.
	// +Optional
	Resource *Resource `json:"resource,omitempty"`

	// Context additional information that carried by the Golang context.Context.
	// This is may only exist in Golang SDK and should be extracted manually using ContextExtractFunc.
	// +Optional
	Context map[string]any `json:"context,omitempty"`

	// Attributes contains simple map[string]any.
	// +Optional
	Attributes map[string]any `json:"attributes,omitempty"`

	// DroppedAttributesCount reports how many dropped attributes in all group has been made.
	// For performance reasons, for now, this field will never be populated.
	// See DroppedAttributes description.
	//
	// +Optional
	DroppedAttributesCount int `json:"dropped_attributes_count,omitempty"`

	// DroppedAttributes contains dropped attributes in following format:
	// [{"key": "dropped-key", "value": "value associated with the dropped key"}]
	// some field may under some group, so the nested value is permitted and SHOULD use the same format as []*DroppedAttribute, i.e:
	// [
	//  {"key": "group-one", "value": [{"key": "dropped-key-under-this-group", "value": "value associated with this key under group one"}]},
	//  {"key": "group-two", "value": [{"key": "dropped-key-under-this-group", "value": "value associated with this key under group two"}, {"key": "another-dropped-key": "value": "value"}]},
	// ]
	//
	//
	// For performance reasons, for now, this field will never be populated.
	// This because, in order to ONLY APPEND the last value into the log string buffer,
	// we need to save all the previous attributes and append it during Handle only.
	// That means, if we append large attributes (whether it duplicate or not), we need to wait
	// the user to call the Handle (which triggered by the Debug, DebugCtx, Info, InfoCtx, etc.. function)
	// before we push it into zapcore.Encoder (and then zapcore.Encoder will push it into buffer.Pool).
	//
	// +Optional
	DroppedAttributes []*DroppedAttribute `json:"dropped_attributes,omitempty"`
}

// DroppedAttribute contains key and value representation of dropped attributes.
type DroppedAttribute struct {
	// Key of the dropped attributes.
	Key string `json:"key,omitempty"`

	// Value of the dropped attributes. Can be []*DroppedAttribute
	// meaning that it contains nested dropped attributes.
	// This happens when the dropped attributes is under the same group of the Key
	// (usually called under WithGroup, but it contains same Key).
	Value any `json:"value,omitempty"`
}
